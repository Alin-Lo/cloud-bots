AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  CreateSubscriber:
    Fn::Not:
    - Fn::Equals:
      - Ref: EmailAddress
      - ''
Outputs:
  InputTopicARN:
    Description: ARN that Dome9 sends events to
    Value:
      Ref: InputTopic
  OutputTopicARN:
    Description: ARN for the export logs topic
    Value:
      Ref: OutputTopic
Parameters:
  DeploymentMode:
    AllowedValues:
    - single
    - multi
    Default: single
    Description: Deployment Mode - can be single or multi
    Type: String
  EmailAddress:
    Default: ''
    Description: OPTIONAL - Email address to send output logs to
    Type: String
Resources:
  InputTopic:
    Properties:
      DisplayName: d9-findings
      TopicName: d9-findings
    Type: AWS::SNS::Topic
  InputTopicPolicy:
    Properties:
      PolicyDocument:
        Id: D9DeliveryPolicy
        Statement:
        - Action: sns:Publish
          Effect: Allow
          Principal:
            AWS: arn:aws:iam::634729597623:root
          Resource:
            Ref: InputTopic
          Sid: D9DeliveryPolicy
        Version: '2012-10-17'
      Topics:
      - Ref: InputTopic
    Type: AWS::SNS::TopicPolicy
  OutputTopic:
    Properties:
      DisplayName: remediationOutput
      TopicName: remediationOutput
    Type: AWS::SNS::Topic
  OutputTopicSubscription:
    Condition: CreateSubscriber
    Properties:
      Endpoint:
        Ref: EmailAddress
      Protocol: email
      TopicArn:
        Ref: OutputTopic
    Type: AWS::SNS::Subscription
  RemediationFunction:
    Properties:
      CodeUri: s3://dome9cftemplatessaeast1/54ff4c491a0c996568fa8e12d159be5c
      Description: Auto-remediation actions from Dome9 events
      Environment:
        Variables:
          ACCOUNT_MODE:
            Ref: DeploymentMode
          SNS_TOPIC_ARN:
            Ref: OutputTopic
      Events:
        d9Findings:
          Properties:
            Topic:
              Ref: InputTopic
          Type: SNS
      FunctionName: dome9AutoRemediations
      Handler: index.lambda_handler
      Policies:
      - Statement:
        - Action:
          - cloudtrail:CreateTrail
          - cloudtrail:StartLogging
          - ec2:CreateFlowLogs
          - ec2:CreateSecurityGroup
          - ec2:CreateTags
          - ec2:DeleteSecurityGroup
          - ec2:DescribeSecurityGroups
          - ec2:ModifyInstanceAttribute
          - ec2:MonitorInstances
          - ec2:RevokeSecurityGroupEgress
          - ec2:RevokeSecurityGroupIngress
          - ec2:StopInstances
          - ec2:TerminateInstances
          - iam:AttachRolePolicy
          - iam:AttachUserPolicy
          - iam:CreatePolicy
          - iam:CreateRole
          - iam:GetPolicy
          - iam:PassRole
          - iam:UpdateAccountPasswordPolicy
          - rds:ModifyDBInstance
          - s3:CreateBucket
          - s3:DeleteBucket
          - s3:DeleteBucketPolicy
          - s3:GetBucketAcl
          - s3:GetBucketPolicy
          - s3:GetObject
          - s3:PutBucketAcl
          - s3:PutBucketLogging
          - s3:PutBucketPolicy
          - s3:PutEncryptionConfiguration
          - s3:PutObject
          - sns:Publish
          - sts:GetCallerIdentity
          - sts:AssumeRole
          Effect: Allow
          Resource: '*'
        Version: '2012-10-17'
      Runtime: python3.6
      Timeout: 120
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
